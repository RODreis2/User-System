===== ./templates/admin.html =====
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Sistema de Votação</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <nav>
        <div class="container">
            <a href="/">Home</a>
            <a href="/login">Login</a>
            <a href="/register">Registro</a>
            <a href="/admin">Admin</a>
        </div>
    </nav>
    <div class="container">
        <div class="card">
            <h1>Painel de Administração</h1>
            <p>Bem-vindo à área de administração.</p>
            <form action="/admin" method="POST">
                <label for="admin_username">Usuário Admin:</label><br>
                <input type="text" id="admin_username" name="admin_username" required><br>
                <label for="admin_password">Senha Admin:</label><br>
                <input type="password" id="admin_password" name="admin_password" required><br><br>
                <input type="submit" value="Entrar como Admin">
            </form>
            <a href="/"><button>Voltar</button></a>
            <a href="/camisas"><button>Camisas</button></a>
            <a href="/canecas"><button>Canecas</button></a>
        </div>
    </div>
</body>
</html>
===== ./templates/index.html =====
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema de Votação</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <nav>
        <div class="container">
            <a href="/">Home</a>
            <a href="/login">Login</a>
            <a href="/register">Registro</a>
            <a href="/admin">Admin</a>
        </div>
    </nav>
    <div class="container">
        <div class="card">
            <h1>Bem-vindo ao sistema de votação</h1>
            <div>
                <button onclick="window.location.href='/login'">Login</button>
                <button onclick="window.location.href='/register'">Registro</button>
                <button onclick="window.location.href='/camisas'">Camisas</button>
                <button onclick="window.location.href='/canecas'">Canecas</button>
                <button onclick="window.location.href='/admin'">Admin</button>
                <button onclick="window.location.href='/whatsapp'">WhatsApp</button>
            </div>
        </div>
    </div>
</body>
</html>
===== ./templates/admin_dashboard.html =====
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel Admin - Sistema de Votação</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <nav>
        <div class="container">
            <a href="/">Home</a>
            <a href="/login">Login</a>
            <a href="/register">Registro</a>
            <a href="/admin">Admin</a>
        </div>
    </nav>
    <div class="container">
        <div class="card">
            <h1>Painel de Controle Admin</h1>
            <p>Gerencie produtos e configurações do WhatsApp.</p>
            
            <h2>Editar Produtos</h2>
            <form action="/admin/update_products" method="POST">
                <label for="product_type">Tipo de Produto:</label><br>
                <select id="product_type" name="product_type" required>
                    <option value="camisas">Camisas</option>
                    <option value="canecas">Canecas</option>
                </select><br>
                <label for="product_name">Nome do Produto:</label><br>
                <input type="text" id="product_name" name="product_name" required><br>
                <label for="product_description">Descrição:</label><br>
                <textarea id="product_description" name="product_description" rows="3" style="width: 100%; padding: 10px; margin-bottom: 15px; border: 1px solid #ddd; border-radius: 4px;"></textarea><br>
                <input type="submit" value="Adicionar/Atualizar Produto">
            </form>

            <h2>Editar Número do WhatsApp</h2>
            <form action="/admin/update_whatsapp" method="POST">
                <label for="whatsapp_number">Número do WhatsApp (formato: +5511999999999):</label><br>
                <input type="text" id="whatsapp_number" name="whatsapp_number" placeholder="+5511999999999" required><br>
                <input type="submit" value="Atualizar Número do WhatsApp">
            </form>

            <a href="/"><button>Voltar</button></a>
        </div>
    </div>
</body>
</html>
===== ./templates/registrar.html =====
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registrar-se - Sistema de Votação</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <nav>
        <div class="container">
            <a href="/">Home</a>
            <a href="/login">Login</a>
            <a href="/register">Registro</a>
            <a href="/admin">Admin</a>
        </div>
    </nav>
    <div class="container">
        <div class="card">
            <h1>Registro</h1>
            <p>Crie sua conta aqui.</p>
            <form action="/registrar" method="POST">
                <label for="username">Usuário:</label><br>
                <input type="text" id="username" name="username" required><br>
                <label for="password">Senha:</label><br>
                <input type="password" id="password" name="password" required><br>
                <label for="confirm_password">Confirmar Senha:</label><br>
                <input type="password" id="confirm_password" name="confirm_password" required><br><br>
                <input type="submit" value="Registrar">
            </form>
            <a href="/"><button>Voltar</button></a>
        </div>
    </div>
</body>
</html>
===== ./templates/canecas.html =====
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Canecas - Sistema de Votação</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <nav>
        <div class="container">
            <a href="/">Home</a>
            <a href="/login">Login</a>
            <a href="/register">Registro</a>
            <a href="/admin">Admin</a>
        </div>
    </nav>
    <div class="container">
        <div class="card">
            <h1>Canecas</h1>
            <p>Escolha sua caneca favorita.</p>
            <div>
                {{range .Products}}
                <div style="margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 4px;">
                    <h3>{{.Name}}</h3>
                    <p>{{.Description}}</p>
                </div>
                {{else}}
                <p>Nenhuma caneca cadastrada no momento.</p>
                {{end}}
            </div>
            <a href="/"><button>Voltar</button></a>
        </div>
    </div>
</body>
</html>
===== ./templates/login.html =====
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Sistema de Votação</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <nav>
        <div class="container">
            <a href="/">Home</a>
            <a href="/login">Login</a>
            <a href="/register">Registro</a>
            <a href="/admin">Admin</a>
        </div>
    </nav>
    <div class="container">
        <div class="card">
            <h1>Login</h1>
            <p>Faça login na sua conta.</p>
            <form action="/login" method="POST">
                <label for="username">Usuário:</label><br>
                <input type="text" id="username" name="username" required><br>
                <label for="password">Senha:</label><br>
                <input type="password" id="password" name="password" required><br><br>
                <input type="submit" value="Entrar">
            </form>
            <a href="/"><button>Voltar</button></a>
        </div>
    </div>
</body>
</html>
===== ./templates/register.html =====
<!DOCTYPE html>
<html>
<head>
    <title>Register</title>
</head>
<body>
    <h2>Register</h2>
    {{if .Error}}
    <div>{{.Error}}</div>
    {{end}}
    <form action="/register" method="POST">
        <div>
            <label>Username:</label>
            <input type="text" name="username" required>
        </div>
        <div>
            <label>Password:</label>
            <input type="password" name="password" required>
        </div>
        <div>
            <label>Confirm Password:</label>
            <input type="password" name="confirm_password" required>
        </div>
        <button type="submit">Register</button>
    </form>
    <p>Already have an account? <a href="/login">Login here</a></p>
</body>
</html> 
===== ./templates/home.html =====
<!DOCTYPE html>
<html>
<head>
    <title>Home</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
</head>
<body>
    <div class="container mt-4">
        <h1>Welcome to the Web App</h1>
        <div class="mt-3">
            <a href="/canecas" class="btn btn-primary">Canecas</a>
            <a href="/camisas" class="btn btn-primary">Camisas</a>
            <a href="/login" class="btn btn-primary">Login</a>
            <a href="/register" class="btn btn-primary">Register</a>
        </div>
    </div>
</body>
</html>
===== ./templates/camisas.html =====
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Camisas - Sistema de Votação</title>
    <link rel="stylesheet" href="/static/styles.css">
</head>
<body>
    <nav>
        <div class="container">
            <a href="/">Home</a>
            <a href="/login">Login</a>
            <a href="/register">Registro</a>
            <a href="/admin">Admin</a>
        </div>
    </nav>
    <div class="container">
        <div class="card">
            <h1>Camisas</h1>
            <p>Escolha sua camisa favorita.</p>
            <div>
                {{range .Products}}
                <div style="margin: 10px 0; padding: 10px; border: 1px solid #ddd; border-radius: 4px;">
                    <h3>{{.Name}}</h3>
                    <p>{{.Description}}</p>
                </div>
                {{else}}
                <p>Nenhuma camisa cadastrada no momento.</p>
                {{end}}
            </div>
            <a href="/"><button>Voltar</button></a>
        </div>
    </div>
</body>
</html>
===== ./go.sum =====
github.com/mattn/go-sqlite3 v1.14.22 h1:2gZY6PC6kBnID23Tichd1K+Z0oS6nE/XwU+Vz/5o4kU=
github.com/mattn/go-sqlite3 v1.14.22/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=
golang.org/x/crypto v0.37.0 h1:kJNSjF/Xp7kU0iB2Z+9viTPMW4EqqsrywMXLJOOsXSE=
golang.org/x/crypto v0.37.0/go.mod h1:vg+k43peMZ0pUMhYmVAWysMK35e6ioLh3wB8ZCAfbVc=

===== ./.gitignore =====
node_modules/
private/
===== ./main.go =====
package main

import (
	"database/sql"
	"fmt"
	"html/template"
	"net/http"
	_ "github.com/mattn/go-sqlite3"
	"golang.org/x/crypto/bcrypt"
)

var db *sql.DB

type Product struct {
	ID          int
	Type        string
	Name        string
	Description string
}

func main() {
	// Conexão com o banco de dados SQLite
	var err error
	db, err = sql.Open("sqlite3", "./database.db")
	if err != nil {
		panic(err)
	}
	defer db.Close()

	// Criação da tabela de usuários, se não existir (sem o campo email)
	createUsersTable := `
	CREATE TABLE IF NOT EXISTS users (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		username TEXT UNIQUE NOT NULL,
		password TEXT NOT NULL
	);`
	_, err = db.Exec(createUsersTable)
	if err != nil {
		panic(err)
	}

	// Criação da tabela de admins, se não existir
	createAdminsTable := `
	CREATE TABLE IF NOT EXISTS admins (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		username TEXT UNIQUE NOT NULL,
		password TEXT NOT NULL
	);`
	_, err = db.Exec(createAdminsTable)
	if err != nil {
		panic(err)
	}

	// Criação da tabela de produtos, se não existir
	createProductsTable := `
	CREATE TABLE IF NOT EXISTS products (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		type TEXT NOT NULL,
		name TEXT NOT NULL,
		description TEXT
	);`
	_, err = db.Exec(createProductsTable)
	if err != nil {
		panic(err)
	}

	// Criação da tabela de configurações, se não existir (para o número do WhatsApp)
	createSettingsTable := `
	CREATE TABLE IF NOT EXISTS settings (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		key TEXT UNIQUE NOT NULL,
		value TEXT NOT NULL
	);`
	_, err = db.Exec(createSettingsTable)
	if err != nil {
		panic(err)
	}

	// Adicionar um administrador padrão se não existir
	defaultAdminUsername := "admin"
	defaultAdminPassword := "admin123"
	var adminCount int
	err = db.QueryRow("SELECT COUNT(*) FROM admins WHERE username = ?", defaultAdminUsername).Scan(&adminCount)
	if err != nil {
		panic(err)
	}
	if adminCount == 0 {
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(defaultAdminPassword), bcrypt.DefaultCost)
		if err != nil {
			panic(err)
		}
		_, err = db.Exec("INSERT INTO admins (username, password) VALUES (?, ?)", defaultAdminUsername, hashedPassword)
		if err != nil {
			panic(err)
		}
		fmt.Println("Administrador padrão criado: username=admin, password=admin123")
	} else {
		fmt.Println("Administrador padrão já existe.")
	}

	// Configuração do servidor de arquivos estáticos
	fs := http.FileServer(http.Dir("static"))
	http.Handle("/static/", http.StripPrefix("/static/", fs))

	// Rotas
	http.HandleFunc("/", indexHandler)
	http.HandleFunc("/login", loginHandler)
	http.HandleFunc("/admin", adminHandler)
	http.HandleFunc("/admin/dashboard", adminDashboardHandler)
	http.HandleFunc("/admin/update_products", adminUpdateProductsHandler)
	http.HandleFunc("/admin/update_whatsapp", adminUpdateWhatsAppHandler)
	http.HandleFunc("/camisas", camisasHandler)
	http.HandleFunc("/canecas", canecasHandler)
	http.HandleFunc("/registrar", registrarHandler)
	http.HandleFunc("/whatsapp", whatsappHandler)

	fmt.Println("Servidor rodando em http://localhost:8080")
	http.ListenAndServe(":8080", nil)
}

func indexHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("templates/index.html")
	if err != nil {
		http.Error(w, "Erro ao carregar a página inicial", http.StatusInternalServerError)
		return
	}
	message := r.URL.Query().Get("message")
	data := struct {
		Message string
	}{
		Message: message,
	}
	tmpl.Execute(w, data)
}

func loginHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		tmpl, err := template.ParseFiles("templates/login.html")
		if err != nil {
			http.Error(w, "Erro ao carregar a página de login", http.StatusInternalServerError)
			return
		}
		tmpl.Execute(w, nil)
		return
	}

	if r.Method == "POST" {
		username := r.FormValue("username")
		password := r.FormValue("password")

		// Buscar usuário no banco de dados
		var storedPassword string
		err := db.QueryRow("SELECT password FROM users WHERE username = ?", username).Scan(&storedPassword)
		if err == sql.ErrNoRows {
			http.Error(w, "Usuário não encontrado", http.StatusBadRequest)
			return
		}
		if err != nil {
			http.Error(w, "Erro ao buscar usuário", http.StatusInternalServerError)
			return
		}

		// Verificar senha
		err = bcrypt.CompareHashAndPassword([]byte(storedPassword), []byte(password))
		if err != nil {
			http.Error(w, "Senha incorreta", http.StatusBadRequest)
			return
		}

		// Redirecionar para a página inicial com mensagem de sucesso
		http.Redirect(w, r, "/?message=Login+realizado+com+sucesso", http.StatusSeeOther)
		return
	}
}

func adminHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		tmpl, err := template.ParseFiles("templates/admin.html")
		if err != nil {
			http.Error(w, "Erro ao carregar a página de admin", http.StatusInternalServerError)
			return
		}
		tmpl.Execute(w, nil)
		return
	}

	if r.Method == "POST" {
		username := r.FormValue("admin_username")
		password := r.FormValue("admin_password")

		// Buscar admin no banco de dados
		var storedPassword string
		err := db.QueryRow("SELECT password FROM admins WHERE username = ?", username).Scan(&storedPassword)
		if err == sql.ErrNoRows {
			http.Error(w, "Usuário admin não encontrado", http.StatusBadRequest)
			return
		}
		if err != nil {
			http.Error(w, "Erro ao buscar usuário admin", http.StatusInternalServerError)
			return
		}

		// Verificar senha
		err = bcrypt.CompareHashAndPassword([]byte(storedPassword), []byte(password))
		if err != nil {
			http.Error(w, "Senha incorreta para admin", http.StatusBadRequest)
			return
		}

		// Redirecionar para o painel de administração
		http.Redirect(w, r, "/admin/dashboard", http.StatusSeeOther)
		return
	}
}

func adminDashboardHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		tmpl, err := template.ParseFiles("templates/admin_dashboard.html")
		if err != nil {
			http.Error(w, "Erro ao carregar o painel de admin", http.StatusInternalServerError)
			return
		}
		tmpl.Execute(w, nil)
		return
	}
}

func adminUpdateProductsHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		productType := r.FormValue("product_type")
		productName := r.FormValue("product_name")
		productDescription := r.FormValue("product_description")

		// Inserir ou atualizar produto no banco de dados
		_, err := db.Exec("INSERT OR REPLACE INTO products (type, name, description) VALUES (?, ?, ?)", productType, productName, productDescription)
		if err != nil {
			http.Error(w, "Erro ao atualizar produto", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/admin/dashboard?message=Produto+atualizado+com+sucesso", http.StatusSeeOther)
		return
	}
	http.Error(w, "Método não permitido", http.StatusMethodNotAllowed)
}

func adminUpdateWhatsAppHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "POST" {
		whatsappNumber := r.FormValue("whatsapp_number")

		// Atualizar número do WhatsApp no banco de dados
		_, err := db.Exec("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)", "whatsapp_number", whatsappNumber)
		if err != nil {
			http.Error(w, "Erro ao atualizar número do WhatsApp", http.StatusInternalServerError)
			return
		}

		http.Redirect(w, r, "/admin/dashboard?message=Número+do+WhatsApp+atualizado+com+sucesso", http.StatusSeeOther)
		return
	}
	http.Error(w, "Método não permitido", http.StatusMethodNotAllowed)
}

func camisasHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("templates/camisas.html")
	if err != nil {
		http.Error(w, "Erro ao carregar a página de camisas", http.StatusInternalServerError)
		return
	}

	rows, err := db.Query("SELECT id, type, name, description FROM products WHERE type = 'camisas'")
	if err != nil {
		http.Error(w, "Erro ao buscar produtos", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var products []Product
	for rows.Next() {
		var p Product
		if err := rows.Scan(&p.ID, &p.Type, &p.Name, &p.Description); err != nil {
			http.Error(w, "Erro ao ler produtos", http.StatusInternalServerError)
			return
		}
		products = append(products, p)
	}

	data := struct {
		Products []Product
	}{
		Products: products,
	}

	tmpl.Execute(w, data)
}

func canecasHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("templates/canecas.html")
	if err != nil {
		http.Error(w, "Erro ao carregar a página de canecas", http.StatusInternalServerError)
		return
	}

	rows, err := db.Query("SELECT id, type, name, description FROM products WHERE type = 'canecas'")
	if err != nil {
		http.Error(w, "Erro ao buscar produtos", http.StatusInternalServerError)
		return
	}
	defer rows.Close()

	var products []Product
	for rows.Next() {
		var p Product
		if err := rows.Scan(&p.ID, &p.Type, &p.Name, &p.Description); err != nil {
			http.Error(w, "Erro ao ler produtos", http.StatusInternalServerError)
			return
		}
		products = append(products, p)
	}

	data := struct {
		Products []Product
	}{
		Products: products,
	}

	tmpl.Execute(w, data)
}

func whatsappHandler(w http.ResponseWriter, r *http.Request) {
	var whatsappNumber string
	err := db.QueryRow("SELECT value FROM settings WHERE key = ?", "whatsapp_number").Scan(&whatsappNumber)
	if err == sql.ErrNoRows {
		http.Error(w, "Número do WhatsApp não configurado", http.StatusBadRequest)
		return
	}
	if err != nil {
		http.Error(w, "Erro ao buscar número do WhatsApp", http.StatusInternalServerError)
		return
	}

	// Redirecionar para o WhatsApp
	redirectURL := fmt.Sprintf("https://wa.me/%s", whatsappNumber)
	http.Redirect(w, r, redirectURL, http.StatusSeeOther)
}

func registrarHandler(w http.ResponseWriter, r *http.Request) {
	if r.Method == "GET" {
		tmpl, err := template.ParseFiles("templates/registrar.html")
		if err != nil {
			http.Error(w, "Erro ao carregar a página de registro", http.StatusInternalServerError)
			return
		}
		tmpl.Execute(w, nil)
		return
	}

	if r.Method == "POST" {
		username := r.FormValue("username")
		password := r.FormValue("password")
		confirmPassword := r.FormValue("confirm_password")

		// Verificar se as senhas coincidem
		if password != confirmPassword {
			http.Error(w, "Erro ao registrar: as senhas não coincidem", http.StatusBadRequest)
			return
		}

		// Criptografar a senha
		hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
		if err != nil {
			http.Error(w, "Erro ao processar o registro", http.StatusInternalServerError)
			return
		}

		// Inserir no banco de dados (sem email)
		_, err = db.Exec("INSERT INTO users (username, password) VALUES (?, ?)", username, hashedPassword)
		if err != nil {
			http.Error(w, "Erro ao registrar: usuário já existe", http.StatusBadRequest)
			return
		}

		// Redirecionar para a página inicial com mensagem de sucesso
		http.Redirect(w, r, "/?message=Registro+realizado+com+sucesso", http.StatusSeeOther)
		return
	}
}
===== ./README.md =====
# Simple Go Web Server

This is a basic web server written in Go that serves a simple welcome message.

## Prerequisites

- Go 1.21 or later

## Running the Server

1. Clone this repository
2. Navigate to the project directory
3. Run the server:
   ```bash
   go run main.go
   ```
4. Open your browser and visit `http://localhost:8080`

## Project Structure

- `main.go` - Contains the main web server code
- `go.mod` - Go module file for dependency management 
===== ./go.mod =====
module web-app

go 1.23.0

toolchain go1.24.2

require github.com/mattn/go-sqlite3 v1.14.22

require golang.org/x/crypto v0.37.0 // indirect

===== ./static/index.html =====
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login Admin</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        form {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        input {
            display: block;
            margin: 10px 0;
            padding: 8px;
            width: 100%;
            box-sizing: border-box;
        }
        button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            width: 100%;
        }
        button:hover {
            background-color: #45a049;
        }
        #message {
            margin-top: 10px;
            color: red;
        }
    </style>
</head>
<body>
    <form id="loginForm">
        <h2>Login Admin</h2>
        <input type="text" id="username" name="username" placeholder="Usuário" required>
        <input type="password" id="password" name="password" placeholder="Senha" required>
        <button type="submit">Entrar</button>
        <div id="message"></div>
    </form>

    <script>
        document.getElementById('loginForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const response = await fetch('/admin/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ username, password }),
            });
            const data = await response.json();
            document.getElementById('message').textContent = data.message;
            document.getElementById('message').style.color = response.ok ? 'green' : 'red';
        });
    </script>
</body>
</html>
===== ./static/styles.css =====
/* General Styles */
body {
    font-family: 'Arial', sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f4f4f9;
    color: #333;
    line-height: 1.6;
}

.container {
    width: 80%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

h1, h2 {
    color: #2c3e50;
    text-align: center;
}

p {
    text-align: center;
    font-size: 1.1em;
}

/* Navigation and Buttons */
nav {
    background-color: #2c3e50;
    padding: 10px 0;
    margin-bottom: 20px;
}

nav a {
    color: white;
    text-decoration: none;
    padding: 10px 20px;
    display: inline-block;
}

nav a:hover {
    background-color: #34495e;
}

button, input[type="submit"] {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 10px 20px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 10px 2px;
    cursor: pointer;
    border-radius: 4px;
    transition: background-color 0.3s ease;
}

button:hover, input[type="submit"]:hover {
    background-color: #2980b9;
}

/* Forms */
form {
    max-width: 500px;
    margin: 0 auto;
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="text"], input[type="password"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

input[type="text"]:focus, input[type="password"]:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
}

/* Links */
a {
    color: #3498db;
    text-decoration: none;
}

a:hover {
    text-decoration: underline;
}

/* Card Layout for Pages */
.card {
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin: 20px auto;
    max-width: 600px;
    text-align: center;
}

/* Responsive Design */
@media (max-width: 768px) {
    .container {
        width: 95%;
    }
    button, input[type="submit"] {
        width: 100%;
        box-sizing: border-box;
    }
}
===== ./handlers/admin.go =====
package handlers

import (
	"net/http"
)

// AdminDashboardHandler handles the admin dashboard
func AdminDashboardHandler(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement admin dashboard
	w.Write([]byte("Admin Dashboard - Coming Soon"))
}

// AdminUsersManagementHandler handles user management for admins
func AdminUsersManagementHandler(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement user management
	w.Write([]byte("User Management - Coming Soon"))
}

===== ./handlers/users.go =====
package handlers

import (
	"fmt"
	"net/http"
)

// UserProfileData represents additional user profile information
type UserProfileData struct {
	Username   string
	Email      string
	FirstName  string
	LastName   string
	DateJoined string
}

// UserProfileHandler handles user profile viewing/editing
func UserProfileHandler(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement user profile
	fmt.Fprintf(w, "User Profile - Coming Soon")
}

// UserUpdateProfileHandler handles profile updates
func UserUpdateProfileHandler(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement profile update
	fmt.Fprintf(w, "Update Profile - Coming Soon")
}

// UserChangePasswordHandler handles password changes
func UserChangePasswordHandler(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement password change
	fmt.Fprintf(w, "Change Password - Coming Soon")
}

===== ./handlers/handlers.go =====
package handlers

import (
	"fmt"
	"html/template"
	"net/http"
)

// HomeHandler handles the home page
func HomeHandler(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	tmpl, err := template.ParseFiles("templates/home.html")
	if err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		fmt.Println("Error parsing template:", err)
		return
	}
	err = tmpl.Execute(w, nil)
	if err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		fmt.Println("Error executing template:", err)
		return
	}
}

// CanecasHandler handles the canecas page
func CanecasHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("templates/canecas.html")
	if err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		fmt.Println("Error parsing template:", err)
		return
	}
	err = tmpl.Execute(w, nil)
	if err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		fmt.Println("Error executing template:", err)
		return
	}
}

// CamisasHandler handles the camisas page
func CamisasHandler(w http.ResponseWriter, r *http.Request) {
	tmpl, err := template.ParseFiles("templates/camisas.html")
	if err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		fmt.Println("Error parsing template:", err)
		return
	}
	err = tmpl.Execute(w, nil)
	if err != nil {
		http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		fmt.Println("Error executing template:", err)
		return
	}
}

// NotFoundHandler handles 404 errors
func NotFoundHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotFound)
	w.Header().Set("Content-Type", "text/html")
	fmt.Fprintf(w, `
		<!DOCTYPE html>
		<html>
		<head>
			<title>404 Not Found</title>
		</head>
		<body>
			<h2>404 - Page not found</h2>
		</body>
		</html>
	`)
}
===== ./handlers/orders.go =====
package handlers

import (
	"fmt"
	"net/http"
)

// OrderData represents an order in the system
type OrderData struct {
	ID          string
	UserID      string
	Items       []string
	TotalAmount float64
	Status      string
}

// OrderListHandler handles listing all orders
func OrderListHandler(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement order listing
	fmt.Fprintf(w, "Orders List - Coming Soon")
}

// OrderCreateHandler handles order creation
func OrderCreateHandler(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement order creation
	fmt.Fprintf(w, "Create Order - Coming Soon")
}

// OrderGetHandler handles retrieving a specific order
func OrderGetHandler(w http.ResponseWriter, r *http.Request) {
	// TODO: Implement get order
	fmt.Fprintf(w, "Get Order - Coming Soon")
}

===== ./handlers/auth.go =====
package handlers

import (
	"database/sql"
	"html/template"
	"net/http"
	_ "github.com/mattn/go-sqlite3"
)

var (
	db   *sql.DB
	tmpl *template.Template
)

// User represents a registered user
type User struct {
	ID       int
	Username string
	Password string
	IsAdmin  bool
}

// TemplateData holds data for template rendering
type TemplateData struct {
	Error string
}

func InitDB(databasePath string) error {
	var err error
	db, err = sql.Open("sqlite3", databasePath)
	if err != nil {
		return err
	}

	// Create users table if it doesn't exist
	createTableSQL := `
	CREATE TABLE IF NOT EXISTS users (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		username TEXT NOT NULL UNIQUE,
		password TEXT NOT NULL,
		is_admin BOOLEAN DEFAULT FALSE
	);`
	_, err = db.Exec(createTableSQL)
	if err != nil {
		return err
	}

	return nil
}

func init() {
	var err error
	tmpl, err = template.ParseGlob("templates/*.html")
	if err != nil {
		panic(err)
	}
}

// AuthLoginHandler handles user login
func AuthLoginHandler(w http.ResponseWriter, r *http.Request) {
	data := TemplateData{}

	if r.Method == "GET" {
		tmpl.ExecuteTemplate(w, "login.html", data)
		return
	}

	if r.Method == "POST" {
		username := r.FormValue("username")
		password := r.FormValue("password")

		var user User
		err := db.QueryRow("SELECT id, username, password, is_admin FROM users WHERE username = ?", username).
			Scan(&user.ID, &user.Username, &user.Password, &user.IsAdmin)
		if err != nil || user.Password != password {
			data.Error = "Invalid username or password"
			tmpl.ExecuteTemplate(w, "login.html", data)
			return
		}

		http.Redirect(w, r, "/", http.StatusSeeOther)
		return
	}
}

// AuthRegisterHandler handles user registration
func AuthRegisterHandler(w http.ResponseWriter, r *http.Request) {
	data := TemplateData{}

	if r.Method == "GET" {
		tmpl.ExecuteTemplate(w, "register.html", data)
		return
	}

	if r.Method == "POST" {
		username := r.FormValue("username")
		password := r.FormValue("password")
		confirmPass := r.FormValue("confirm_password")

		if password != confirmPass {
			data.Error = "Passwords do not match"
			tmpl.ExecuteTemplate(w, "register.html", data)
			return
		}

		_, err := db.Exec("INSERT INTO users (username, password, is_admin) VALUES (?, ?, ?)", username, password, false)
		if err != nil {
			data.Error = "Username already exists or registration failed"
			tmpl.ExecuteTemplate(w, "register.html", data)
			return
		}

		http.Redirect(w, r, "/login", http.StatusSeeOther)
		return
	}
}
